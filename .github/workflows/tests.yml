---
name: Testing

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:

jobs:
  smoketest:
    name: Smoke test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Run minimal test set
        run: |
          ./autogen.sh
          ./configure
          make test

  test_windows:
    needs: smoketest
    name: Test Windows
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - windows-2019
          - windows-2022

    steps:
      - uses: actions/checkout@v2

      - name: generate a makefile and use it to install more packages
        run: |
          # This is a pretty big hammer, but gets the windows compile moving
          ./scripts/hack_fakeautoconf.sh
          make build-dep
        shell: bash

      - name: Run a configure step
        run: |
          export CFLAGS="-fprofile-arcs -ftest-coverage"
          export LDFLAGS="--coverage"
          ./scripts/hack_fakeautoconf.sh
        shell: bash

      - name: Run embedded tests
        run: make test
        shell: bash

      - if: ${{ always() }}
        name: Move test outputs to an arch specific location
        shell: bash
        run: |
          mkdir -p tests/${{ matrix.os }}
          mv tests/*.out tests/${{ matrix.os }}

      - if: ${{ always() }}
        name: Upload tests output
        uses: actions/upload-artifact@v2
        with:
          name: tests-out
          path: tests

      - name: Generate coverage data
        run: |
          make gcov
        shell: bash

      - name: Upload data to codecov
        uses: codecov/codecov-action@v2

  binaries_windows:
    name: Binaries for Windows
    needs:
      - test_windows
    runs-on: windows-latest

    strategy:
      fail-fast: true
      matrix:
        arch:
          - x86_64-w64-mingw32-
          - i686-w64-mingw32-


    steps:
      - uses: actions/checkout@v2

      - name: Fix Checkout
        run: |
          git fetch --force --tags

      - name: Configure and Build
        shell: bash
        run: |
          export FIXME=happynet3.0.0
          export GIT_COMMITS=${{ git --version }}
          export CC=${{ matrix.arch }}-gcc
          export AR=${{ matrix.arch }}-ar
          ./scripts/hack_fakeautoconf.sh
          make

      - name: Create binary dir
        shell: bash
        run: |
          make install DESTDIR=binaries/${{ matrix.arch }}

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: binaries


  binaries_linux_crosscompile:
    name: Binaries for linux
    needs:
      - test_linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        arch:
          - arm-linux-gnueabi

          # I assume these architectures produce working code, but this has
          # not been directly confirmed.
          # They are compiled dynamically against normal libc, so will not
          # work on openwrt.
          - aarch64-linux-gnu
          - mips-linux-gnu
          - mipsel-linux-gnu

    steps:
      - uses: actions/checkout@v2

      - name: Fix Checkout
        run: |
          git fetch --force --tags

      - name: Install cross compiler
        run: |
          sudo apt-get update
          sudo apt-get install \
            binutils-${{ matrix.arch }} \
            gcc-${{ matrix.arch }}

      - name: Configure and Build
        shell: bash
        run: |
          ./autogen.sh
          export CC=${{ matrix.arch }}-gcc
          export AR=${{ matrix.arch }}-ar
          ./configure --host ${{ matrix.arch }}
          make

      - name: Create binary dir
        shell: bash
        run: |
          make install DESTDIR=binaries/${{ matrix.arch }}

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: binaries

  # Given the clearly documented use of annotated tags to signal releases,
  # it seems strange that there is no simple way to trigger actions if the
  # tag is annotated.  So we need to jump through some extra hoops.
  #
  # Looking at https://github.com/actions/checkout/issues/290 seems to show
  # that github just doesnt care about how git expects annotated tags to be
  # used.
  #
  # This workflow has added a `git fetch --force --tags` to every job that
  # needs to have working tags

  upload_release:
    name: Upload Release Assets
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - binaries_windows
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Fix Checkout
        run: |
          git fetch --force --tags

      - name: Get Tag Type
        id: get_tagtype
        run: |
          TYPE=$(git cat-file -t $GITHUB_REF)
          echo "::set-output name=TAGTYPE::$TYPE"
          echo ==========
          echo REF=$GITHUB_REF
          echo TAGTYPE=$TYPE

      - name: Fetch all Artifacts
        if: steps.get_tagtype.outputs.TAGTYPE == 'tag'
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Upload Assets to Release
        if: steps.get_tagtype.outputs.TAGTYPE == 'tag'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            artifacts/packages-dpkg/*.deb
            artifacts/packages-rpm/*.rpm
